using System.Linq;
using System.Reflection;
using Elsa.Http.OpenApi.Contracts;

namespace Elsa.Http.OpenApi.Services;

/// <summary>
/// Service for retrieving Elsa package version information by examining loaded assemblies.
/// </summary>
public class ElsaVersionProvider : IElsaVersionProvider
{
    /// <summary>
    /// Gets the Elsa package version by examining loaded assemblies.
    /// </summary>
    /// <returns>The package version string.</returns>
    public string GetVersion()
    {
        // Try to get version from Elsa.Workflows.Core assembly first
        var elsaCoreAssembly = AppDomain.CurrentDomain.GetAssemblies()
            .FirstOrDefault(a => a.GetName().Name == "Elsa.Workflows.Core");
        
        if (elsaCoreAssembly != null)
        {
            var versionAttribute = elsaCoreAssembly.GetCustomAttribute<AssemblyInformationalVersionAttribute>();
            return RemoveAutoGeneratedPostfix(versionAttribute);
        }
        
        // Fallback to any Elsa assembly
        var elsaAssembly = AppDomain.CurrentDomain.GetAssemblies()
            .FirstOrDefault(a => a.GetName().Name?.StartsWith("Elsa.") == true);
            
        if (elsaAssembly != null)
        {
            var versionAttribute = elsaAssembly.GetCustomAttribute<AssemblyInformationalVersionAttribute>();
            return RemoveAutoGeneratedPostfix(versionAttribute);
        }
        
        // Final fallback
        return "1.0.0";
    }

    private static string RemoveAutoGeneratedPostfix(AssemblyInformationalVersionAttribute? versionAttribute) =>
        versionAttribute?.InformationalVersion.Split("+")[0] ?? "1.0.0";
}
